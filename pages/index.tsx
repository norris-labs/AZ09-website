import { Container, Link, Typography } from '@mui/material';
import Box from "@mui/material/Box";
import { useEthers } from '@usedapp/core';
import { utils } from 'ethers';
import type { NextPage } from 'next';
import Head from 'next/head';
import * as React from 'react';
import { memo, useCallback, useEffect, useState } from 'react';
import { App } from '../components/App';
import { Navigation } from '../components/Navigation';
import { Toast, ToastState } from '../components/Toast';
import { useCost } from "../hooks/useCost";
import { useMint } from "../hooks/useMint";
import { useMintedTokenIDs } from "../hooks/useMintedTokenIDs";


enum Copy {
  connectWallet = 'Connect wallet first before minting',
}

enum Edition {
  light = 'light',
  dark = 'dark'
}

export enum TXStates {
  None = "None",
  PendingSignature = "PendingSignature",
  Mining = "Mining",
  Success = "Success",
  Fail = "Fail",
  Exception = "Exception",
}


const Home: NextPage = () => {
  const { activateBrowserWallet, account } = useEthers()
  const [currentTab, setCurrentTab] = useState<number>(0)
  const cost: number = useCost()
  const mintedTokenIDs = useMintedTokenIDs()
  const [toastState, setToastState] = useState<ToastState|null>(null);
  const [editionName, setEditionName] = useState<'light'|'dark'>('light');
  const [activeMintId, setActiveMintId] = useState<null|number>(null);
  const {state: mintTxState, send: sendMintTx} = useMint(editionName);

  useEffect(() => {
    let _editionName;

    if (currentTab === 0) {
      _editionName = Edition.light
    } else {
      _editionName = Edition.dark
    }

    setEditionName(_editionName)
  }, [currentTab])

  useEffect(() => {
    const message = mintTxState.errorMessage || mintTxState.status;
    const level = mintTxState.status;
    if (!message && !level) return;

    const toastArgs: ToastState = {
      msg: message,
      level
    }

    setToastState(toastArgs)
  }, [mintTxState.status])

  useEffect(() => {
    if (mintTxState.status === "None" || mintTxState.status === "Exception") {
      setActiveMintId(null);
    }
  }, [activeMintId])

  useEffect(() => {
    if (!activeMintId) return;
    handleNFTMint();
  }, [activeMintId])

  const handleWalletDisconnected = useCallback(() => {
    const toastArgs = {
      msg: Copy.connectWallet,
      level: TXStates.Exception
    }
    setToastState(toastArgs);
    alert(JSON.stringify(toastArgs));
  }, [])

  const handleMintError = useCallback(() => {
    if (!toastState) return;
    setToastState(toastState);
    alert(JSON.stringify(toastState.msg));
  }, [toastState])

  const handleNFTMint = useCallback(() => {
    if (!account) {
      handleWalletDisconnected();
    }

    try {
      sendMintTx(activeMintId, {
        value: cost
      });
    } catch(e) {
      handleMintError()
    }
  }, [activeMintId])


  const isNFTMinted = useCallback((tokenID: number) => {
    return mintedTokenIDs.includes(tokenID);
  }, [mintedTokenIDs])

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container fixed maxWidth="xl">
        <Navigation
          account={account}
          activateBrowserWallet={activateBrowserWallet}
          toastState={toastState}
          setToastState={setToastState}
        />
        <Box sx={{
          my: 10
        }}>
          <Typography
            variant="h4"
            component="h1"
            sx={{ lineHeight: '2.5rem'}}
          >
            AZ09 is a collection of 2,592 unique, programmatically generated monogram <b><Link target="_blank" href="https://ethereum.org/en/nft/">NFTs</Link></b> on the <b><Link target="_blank" href="https://fantom.foundation/">Fantom network</Link></b>. All Monograms contain two (hand drawn) characters from the permutations of A-Z and 0-9. No two monograms are alike. Comes in two variations: Dark and Light.
          </Typography>
        </Box>
        <App
          activeMintId={activeMintId}
          cost={cost ? utils.formatEther(cost) : 0}
          editionName={editionName}
          currentTab={currentTab}
          isNFTMinted={isNFTMinted}
          setActiveMintId={setActiveMintId}
          setCurrentTab={setCurrentTab}
          txState={mintTxState}
        />

        {JSON.stringify(mintTxState)}
        {process.env.NEXT_PUBLIC_CHAIN_ID}

        {toastState &&
          <Toast
            toastState={toastState}
            setToastState={setToastState}
          />
        }

      </Container>
    </div>
  )
}

export default memo(Home)
